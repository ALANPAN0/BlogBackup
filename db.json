{"meta":{"version":1,"warehouse":"1.0.3"},"models":{"Asset":[{"_id":"themes/yilia/source/js/pc.js","path":"js/pc.js","modified":0},{"_id":"themes/yilia/source/js/mobile.js","path":"js/mobile.js","modified":0},{"_id":"themes/yilia/source/js/main.js","path":"js/main.js","modified":0},{"_id":"themes/yilia/source/js/jquery.lazyload.js","path":"js/jquery.lazyload.js","modified":0},{"_id":"themes/yilia/source/js/instagram.js","path":"js/instagram.js","modified":0},{"_id":"themes/yilia/source/img/zhihu.png","path":"img/zhihu.png","modified":0},{"_id":"themes/yilia/source/img/weibo.png","path":"img/weibo.png","modified":0},{"_id":"themes/yilia/source/img/twitter.png","path":"img/twitter.png","modified":0},{"_id":"themes/yilia/source/img/stackoverflow.png","path":"img/stackoverflow.png","modified":0},{"_id":"themes/yilia/source/img/scrollbar_arrow.png","path":"img/scrollbar_arrow.png","modified":0},{"_id":"themes/yilia/source/img/rss.png","path":"img/rss.png","modified":0},{"_id":"themes/yilia/source/img/pinterest.png","path":"img/pinterest.png","modified":0},{"_id":"themes/yilia/source/img/pinboard.png","path":"img/pinboard.png","modified":0},{"_id":"themes/yilia/source/img/mail.png","path":"img/mail.png","modified":0},{"_id":"themes/yilia/source/img/linkedin.png","path":"img/linkedin.png","modified":0},{"_id":"themes/yilia/source/img/img-loading.png","path":"img/img-loading.png","modified":0},{"_id":"themes/yilia/source/img/img-err.png","path":"img/img-err.png","modified":0},{"_id":"themes/yilia/source/img/google.png","path":"img/google.png","modified":0},{"_id":"themes/yilia/source/img/github.png","path":"img/github.png","modified":0},{"_id":"themes/yilia/source/img/facebook.png","path":"img/facebook.png","modified":0},{"_id":"themes/yilia/source/img/douban.png","path":"img/douban.png","modified":0},{"_id":"themes/yilia/source/img/delicious.png","path":"img/delicious.png","modified":0},{"_id":"themes/yilia/source/img/coderwall.png","path":"img/coderwall.png","modified":0},{"_id":"themes/yilia/source/fancybox/jquery.fancybox.pack.js","path":"fancybox/jquery.fancybox.pack.js","modified":0},{"_id":"themes/yilia/source/fancybox/jquery.fancybox.js","path":"fancybox/jquery.fancybox.js","modified":0},{"_id":"themes/yilia/source/fancybox/jquery.fancybox.css","path":"fancybox/jquery.fancybox.css","modified":0},{"_id":"themes/yilia/source/fancybox/helpers/jquery.fancybox-thumbs.js","path":"fancybox/helpers/jquery.fancybox-thumbs.js","modified":0},{"_id":"themes/yilia/source/fancybox/helpers/jquery.fancybox-thumbs.css","path":"fancybox/helpers/jquery.fancybox-thumbs.css","modified":0},{"_id":"themes/yilia/source/fancybox/helpers/jquery.fancybox-media.js","path":"fancybox/helpers/jquery.fancybox-media.js","modified":0},{"_id":"themes/yilia/source/fancybox/helpers/jquery.fancybox-buttons.js","path":"fancybox/helpers/jquery.fancybox-buttons.js","modified":0},{"_id":"themes/yilia/source/fancybox/helpers/jquery.fancybox-buttons.css","path":"fancybox/helpers/jquery.fancybox-buttons.css","modified":0},{"_id":"themes/yilia/source/fancybox/helpers/fancybox_buttons.png","path":"fancybox/helpers/fancybox_buttons.png","modified":0},{"_id":"themes/yilia/source/fancybox/fancybox_sprite@2x.png","path":"fancybox/fancybox_sprite@2x.png","modified":0},{"_id":"themes/yilia/source/fancybox/fancybox_sprite.png","path":"fancybox/fancybox_sprite.png","modified":0},{"_id":"themes/yilia/source/fancybox/fancybox_overlay.png","path":"fancybox/fancybox_overlay.png","modified":0},{"_id":"themes/yilia/source/fancybox/fancybox_loading@2x.gif","path":"fancybox/fancybox_loading@2x.gif","modified":0},{"_id":"themes/yilia/source/fancybox/fancybox_loading.gif","path":"fancybox/fancybox_loading.gif","modified":0},{"_id":"themes/yilia/source/fancybox/blank.gif","path":"fancybox/blank.gif","modified":0},{"_id":"themes/yilia/source/css/style.styl","path":"css/style.styl","modified":0},{"_id":"themes/yilia/source/css/fonts/fontawesome-webfont.woff","path":"css/fonts/fontawesome-webfont.woff","modified":0},{"_id":"themes/yilia/source/css/fonts/fontawesome-webfont.ttf","path":"css/fonts/fontawesome-webfont.ttf","modified":0},{"_id":"themes/yilia/source/css/fonts/fontawesome-webfont.svgz","path":"css/fonts/fontawesome-webfont.svgz","modified":0},{"_id":"themes/yilia/source/css/fonts/fontawesome-webfont.svg","path":"css/fonts/fontawesome-webfont.svg","modified":0},{"_id":"themes/yilia/source/css/fonts/fontawesome-webfont.eot","path":"css/fonts/fontawesome-webfont.eot","modified":0},{"_id":"source/uploads/avatar.png","path":"uploads/avatar.png","modified":0}],"Cache":[{"_id":"source/instagram/index.md","shasum":"52e6c67b8c422f19c13f0bc8178210384a8c7f64","modified":1452687963000},{"_id":"source/_posts/一篇搞定RSA加密与SHA签名.md","shasum":"ead82e34535dbb354cb42031951788f316371d5a","modified":1452685286000},{"_id":"themes/yilia/README.md","shasum":"8648a81b3ae08a4accd6b0541533e662511e6400","modified":1452685286000},{"_id":"themes/yilia/_config.yml","shasum":"05fe1957e513ba151a33c17c0232f22b711d7ad2","modified":1452687526000},{"_id":"themes/yilia/languages/de.yml","shasum":"ecb13af8af81ccc033ae7494cb2f94f84f6466ad","modified":1452685286000},{"_id":"themes/yilia/languages/default.yml","shasum":"9e59cd11b290be84909612beb12d0f93ce737f53","modified":1452685286000},{"_id":"themes/yilia/languages/en.yml","shasum":"8fa0a7482188ca56fd3cf19c4a87320f85a76846","modified":1452685286000},{"_id":"themes/yilia/languages/fr-FR.yml","shasum":"12cfa96dc412ecb6f8bf4de2690575929464906e","modified":1452685286000},{"_id":"themes/yilia/languages/ru.yml","shasum":"9997425292031ee8a58a93346ac6d3f38f18e566","modified":1452685286000},{"_id":"themes/yilia/languages/zh-Hans.yml","shasum":"0d7e8da60fd5e5db217e1733ac273ae00fd752ea","modified":1452685286000},{"_id":"themes/yilia/languages/zh-hk.yml","shasum":"606dfb34d3fec1d7895a654ff7a5a1de0c6a5c55","modified":1452685286000},{"_id":"themes/yilia/layout/_partial/after-footer.ejs","shasum":"082504c9fd8600306d4ca55f03e3cbb0ddd99dd7","modified":1452685286000},{"_id":"themes/yilia/layout/_partial/archive-post.ejs","shasum":"8dfb6d68aa8a0661d26c32ce1ce1f45815364c3a","modified":1452685286000},{"_id":"themes/yilia/layout/_partial/archive.ejs","shasum":"a6e94061ac55b9eb55275f87b608d62f6ea35659","modified":1452685286000},{"_id":"themes/yilia/languages/zh-tw.yml","shasum":"9e4034870b57d2bb3063c91f8d206a6c4d7b3789","modified":1452685286000},{"_id":"themes/yilia/layout/_partial/article.ejs","shasum":"d6306cd897683c25184a50b29931aa1fa18d119c","modified":1452685286000},{"_id":"themes/yilia/layout/_partial/footer.ejs","shasum":"f2994e0acd1d606ebf4680afc4fa652e148ccf4e","modified":1452685286000},{"_id":"themes/yilia/layout/_partial/google-analytics.ejs","shasum":"f921e7f9223d7c95165e0f835f353b2938e40c45","modified":1452685287000},{"_id":"themes/yilia/layout/_partial/head.ejs","shasum":"f7068535c0df7e7bc6614a046e7d4b262a65d8b2","modified":1452685287000},{"_id":"themes/yilia/layout/_partial/header.ejs","shasum":"6387a93dad7c3d778eb91e3821852fbf6813880c","modified":1452685287000},{"_id":"themes/yilia/layout/_partial/left-col.ejs","shasum":"47dc7c1d35928a7b026c683547f8482d2e524c63","modified":1452685287000},{"_id":"themes/yilia/layout/_partial/mathjax.ejs","shasum":"54fab4d3d64cb937d6baec7324ffabf9f202b883","modified":1452685287000},{"_id":"themes/yilia/layout/_partial/mobile-nav.ejs","shasum":"fff29e619af2b1abcab7d5d2d6f78428272f18f7","modified":1452685287000},{"_id":"themes/yilia/layout/_partial/post/category.ejs","shasum":"d4f0e36f9a2167e91082dbd7d52425a06d2bebbf","modified":1452685287000},{"_id":"themes/yilia/layout/_partial/post/date.ejs","shasum":"c0c988334e857a77ba455a056dfa21809e7e76a5","modified":1452685287000},{"_id":"themes/yilia/layout/_partial/post/duoshuo.ejs","shasum":"e8399025ed3b980aedb821c92855889f5f12fd5b","modified":1452685287000},{"_id":"themes/yilia/layout/_partial/post/nav.ejs","shasum":"d19dee2082528e1844bed3aa4e4bd59f15fd7a7a","modified":1452685287000},{"_id":"themes/yilia/layout/_partial/post/share_addthis.ejs","shasum":"0ac35bd92e58983c189ac0c35df404ebc6ee826e","modified":1452685287000},{"_id":"themes/yilia/layout/_partial/post/share_jia.ejs","shasum":"924744aa3c1bce9056ba03cec02e19e095009126","modified":1452685287000},{"_id":"themes/yilia/layout/_partial/post/tag.ejs","shasum":"78612cfc091d7d861a70455a0dc8c3036e460879","modified":1452685287000},{"_id":"themes/yilia/layout/archive.ejs","shasum":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1452685287000},{"_id":"themes/yilia/layout/category.ejs","shasum":"765426a9c8236828dc34759e604cc2c52292835a","modified":1452685287000},{"_id":"themes/yilia/layout/_partial/post/title.ejs","shasum":"2f275739b6f1193c123646a5a31f37d48644c667","modified":1452685287000},{"_id":"themes/yilia/layout/index.ejs","shasum":"aa1b4456907bdb43e629be3931547e2d29ac58c8","modified":1452685287000},{"_id":"themes/yilia/layout/page.ejs","shasum":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1452685287000},{"_id":"themes/yilia/layout/layout.ejs","shasum":"4a5566f704f3246f5ef77badddf18d2e16750328","modified":1452685287000},{"_id":"themes/yilia/layout/post.ejs","shasum":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1452685287000},{"_id":"themes/yilia/layout/tag.ejs","shasum":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1452685287000},{"_id":"themes/yilia/package.json","shasum":"00357ef6f24eb049074da81809e98f973f528cca","modified":1452685287000},{"_id":"themes/yilia/source/css/_extend.styl","shasum":"8ab1ad313bd6707d248c5ca1ee9a5eab8d815e42","modified":1452685287000},{"_id":"themes/yilia/source/css/_partial/article.styl","shasum":"872fc4e63509fef885c939e5fd70e6ed439beced","modified":1452685287000},{"_id":"themes/yilia/source/css/_partial/footer.styl","shasum":"7ca837a4cc34db1c35f01baec85eb10ccc64ea86","modified":1452685287000},{"_id":"themes/yilia/source/css/_partial/header.styl","shasum":"67e59feb18eee6026717cb440d86ab9551782628","modified":1452685287000},{"_id":"themes/yilia/source/css/_partial/highlight.styl","shasum":"08d3205dde3235f3e6881126268e6c473f46a8ac","modified":1452685287000},{"_id":"themes/yilia/source/css/_partial/main.styl","shasum":"c368f1533053d4cffdf0ad982603271400b08e33","modified":1452685287000},{"_id":"themes/yilia/source/css/_partial/instagram.styl","shasum":"8a7b07bf5ea2d3588c0019f722c245bb1a8696af","modified":1452685287000},{"_id":"themes/yilia/source/css/_partial/mobile-slider.styl","shasum":"e19c7fae6968ad3ea6cfc110900a991f9b5fce31","modified":1452685287000},{"_id":"themes/yilia/source/css/_partial/mobile.styl","shasum":"3a03b04ef8ac305aa5dbf7b9db99cd9377d07383","modified":1452685287000},{"_id":"themes/yilia/source/css/_partial/page.styl","shasum":"720b5b169bc28ccba3794efce9b7cd39f243dec7","modified":1452685287000},{"_id":"themes/yilia/source/css/_partial/scroll.styl","shasum":"5539a38f9acd603d453a0ea0d8ce10893cf83d22","modified":1452685287000},{"_id":"themes/yilia/source/css/_partial/share.styl","shasum":"22697b9a9877ab9f018364feb57aeea4a8313c9a","modified":1452685287000},{"_id":"themes/yilia/source/css/_partial/tagcloud.styl","shasum":"af0115de5c6455f899a2e09225b50224982c039d","modified":1452685287000},{"_id":"themes/yilia/source/css/_partial/wheelmenu.styl","shasum":"74630c56944e27bef53ef0c0e391611a2eec2ed0","modified":1452685287000},{"_id":"themes/yilia/source/css/_util/grid.styl","shasum":"1aa883ab432d9e4139c89dcbd40ae2bd1528d029","modified":1452685287000},{"_id":"themes/yilia/source/css/_util/mixin.styl","shasum":"429bad87fc156eacf226c5e35b0eafc277f2504b","modified":1452685287000},{"_id":"themes/yilia/source/css/_variables.styl","shasum":"8b63ea3c7199524b9a1541075c6f8fb2c0d0ea3d","modified":1452685287000},{"_id":"themes/yilia/source/css/fonts/fontawesome-webfont.eot","shasum":"3ce87b82c7a4ffdf65e96765c2ffda10b1a283c6","modified":1452685287000},{"_id":"themes/yilia/source/css/fonts/fontawesome-webfont.svgz","shasum":"4bfdd33ed702e32ae01399fcc2652377f78e7626","modified":1452685287000},{"_id":"themes/yilia/source/css/fonts/fontawesome-webfont.ttf","shasum":"1480b8101b02da9bc4c60341b5e185e63e585064","modified":1452685287000},{"_id":"themes/yilia/source/css/fonts/fontawesome-webfont.woff","shasum":"cafc4ac5761a0a252d33dce4ea3952cf9a38d832","modified":1452685287000},{"_id":"themes/yilia/source/css/style.styl","shasum":"456e8cfe3b0b0371e81848ea9b0bc7ffd5360921","modified":1452685287000},{"_id":"themes/yilia/source/fancybox/blank.gif","shasum":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1452685287000},{"_id":"themes/yilia/source/fancybox/fancybox_loading.gif","shasum":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1452685287000},{"_id":"themes/yilia/source/fancybox/fancybox_overlay.png","shasum":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1452685287000},{"_id":"themes/yilia/source/fancybox/fancybox_loading@2x.gif","shasum":"273b123496a42ba45c3416adb027cd99745058b0","modified":1452685287000},{"_id":"themes/yilia/source/fancybox/fancybox_sprite.png","shasum":"17df19f97628e77be09c352bf27425faea248251","modified":1452685287000},{"_id":"themes/yilia/source/fancybox/fancybox_sprite@2x.png","shasum":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1452685287000},{"_id":"themes/yilia/source/fancybox/helpers/fancybox_buttons.png","shasum":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1452685287000},{"_id":"themes/yilia/source/fancybox/helpers/jquery.fancybox-buttons.js","shasum":"dc3645529a4bf72983a39fa34c1eb9146e082019","modified":1452685287000},{"_id":"themes/yilia/source/fancybox/helpers/jquery.fancybox-buttons.css","shasum":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1452685287000},{"_id":"themes/yilia/source/fancybox/helpers/jquery.fancybox-media.js","shasum":"294420f9ff20f4e3584d212b0c262a00a96ecdb3","modified":1452685287000},{"_id":"themes/yilia/source/fancybox/helpers/jquery.fancybox-thumbs.css","shasum":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1452685287000},{"_id":"themes/yilia/source/fancybox/helpers/jquery.fancybox-thumbs.js","shasum":"47da1ae5401c24b5c17cc18e2730780f5c1a7a0c","modified":1452685287000},{"_id":"themes/yilia/source/fancybox/jquery.fancybox.css","shasum":"b6aa6692c2e5f8bd74d96827b78570f0c5683c20","modified":1452685287000},{"_id":"themes/yilia/source/img/coderwall.png","shasum":"fa84676c4d654e040e51fd34bfcd9f9348cd5331","modified":1452685287000},{"_id":"themes/yilia/source/img/delicious.png","shasum":"9553a5f5189e4a953e04a58a49dbfa74b86b73dd","modified":1452685287000},{"_id":"themes/yilia/source/img/douban.png","shasum":"e2ade003ffadd5826ee66ec23901c2d6e8607e4e","modified":1452685287000},{"_id":"themes/yilia/source/fancybox/jquery.fancybox.js","shasum":"a82597493d75ea989ca586e09173cff332efe41e","modified":1452685287000},{"_id":"themes/yilia/source/fancybox/jquery.fancybox.pack.js","shasum":"9e0d51ca1dbe66f6c0c7aefd552dc8122e694a6e","modified":1452685287000},{"_id":"themes/yilia/source/img/facebook.png","shasum":"d19ad7a0903daf26817afd8753cd97e0cc714f54","modified":1452685287000},{"_id":"themes/yilia/source/img/github.png","shasum":"b84d03b32fa388dcbf149296ebd16dce6223d48d","modified":1452685287000},{"_id":"themes/yilia/source/img/google.png","shasum":"61a21fec7346fa3400b747ac9a201cf3d5bc013d","modified":1452685287000},{"_id":"themes/yilia/source/img/img-err.png","shasum":"23a63ea26eb3c1d5e677d9883cf36cc1a1a1228b","modified":1452685287000},{"_id":"themes/yilia/source/css/_partial/archive.styl","shasum":"8b349f1605024dcdae054e04f02d71a2e84957c2","modified":1452685287000},{"_id":"themes/yilia/source/img/img-loading.png","shasum":"a9cd5cd11866824f31e3d1c5e23badfeb3f73031","modified":1452685287000},{"_id":"themes/yilia/source/img/linkedin.png","shasum":"e203138fb53c257cb214e97f4e30091b9c568d2c","modified":1452685287000},{"_id":"themes/yilia/source/img/mail.png","shasum":"fca8199cc77fdbd700a45bf56d091c82f4a67fe7","modified":1452685287000},{"_id":"themes/yilia/source/img/pinboard.png","shasum":"0891fbb6d092fa012bf936019923383d84c6aeb0","modified":1452685287000},{"_id":"themes/yilia/source/img/rss.png","shasum":"430fd47340e75214c081abd05cd7410cf7c71b86","modified":1452685287000},{"_id":"themes/yilia/source/img/pinterest.png","shasum":"9c72917f8779c083157c6ce7a5d62ed4874f0630","modified":1452685287000},{"_id":"themes/yilia/source/img/scrollbar_arrow.png","shasum":"d64a33c4ddfbdb89deeb6f4e3d36eb84dc4777c0","modified":1452685287000},{"_id":"themes/yilia/source/img/stackoverflow.png","shasum":"da5dfe9043055c95e479d49c78cd3b020de608f2","modified":1452685287000},{"_id":"themes/yilia/source/img/twitter.png","shasum":"14dbb8e62d056525253bc0de13acd1723da7a934","modified":1452685287000},{"_id":"themes/yilia/source/img/weibo.png","shasum":"280dae3fd38086158b4a1b57edb94c06b1a5014b","modified":1452685287000},{"_id":"themes/yilia/source/img/zhihu.png","shasum":"a6d6ef65e9ac82e613a311810391ebb90d9b1c1d","modified":1452685287000},{"_id":"themes/yilia/source/js/instagram.js","shasum":"81e13cacf4947118ed1920e59b04ccf6beef6b86","modified":1452685287000},{"_id":"themes/yilia/source/js/jquery.lazyload.js","shasum":"c11a2e7b330d16d06feabd0a8477099adf9d6799","modified":1452685287000},{"_id":"themes/yilia/source/js/main.js","shasum":"e2633f282e377a4169649c9f17dc96036ad4fc64","modified":1452685287000},{"_id":"themes/yilia/source/js/pc.js","shasum":"a5397d34a04084ee089b4b1e26457ab46ecea63e","modified":1452685287000},{"_id":"themes/yilia/source/js/mobile.js","shasum":"b68cc01d24e80973c48205f551da87f3f3427644","modified":1452685287000},{"_id":"themes/yilia/source/css/fonts/fontawesome-webfont.svg","shasum":"ba13657479b46daecb6336bfe376f84cef3ae58b","modified":1452685287000},{"_id":"source/uploads/avatar.png","shasum":"ec41946f7ef01c7523c8fdc1caf72b4cd0adbb5f","modified":1452685286000},{"_id":"public/js/pc.js","modified":1452686532871,"shasum":"fdbc039fc9ffa70815b5fc4daaa587ae29693f10"},{"_id":"public/js/mobile.js","modified":1452686532875,"shasum":"b68cc01d24e80973c48205f551da87f3f3427644"},{"_id":"public/js/main.js","modified":1452686532877,"shasum":"0640b68a76fab3c693b3cd1e4d04d14be1e53940"},{"_id":"public/js/jquery.lazyload.js","modified":1452686532878,"shasum":"c11a2e7b330d16d06feabd0a8477099adf9d6799"},{"_id":"public/js/instagram.js","modified":1452686532880,"shasum":"f19adbcc0dac33536bc6660598059048ec901882"},{"_id":"public/img/zhihu.png","modified":1452686532885,"shasum":"a6d6ef65e9ac82e613a311810391ebb90d9b1c1d"},{"_id":"public/img/weibo.png","modified":1452686532887,"shasum":"280dae3fd38086158b4a1b57edb94c06b1a5014b"},{"_id":"public/img/twitter.png","modified":1452686532889,"shasum":"14dbb8e62d056525253bc0de13acd1723da7a934"},{"_id":"public/img/stackoverflow.png","modified":1452686532894,"shasum":"da5dfe9043055c95e479d49c78cd3b020de608f2"},{"_id":"public/img/scrollbar_arrow.png","modified":1452686532898,"shasum":"d64a33c4ddfbdb89deeb6f4e3d36eb84dc4777c0"},{"_id":"public/img/rss.png","modified":1452686532900,"shasum":"430fd47340e75214c081abd05cd7410cf7c71b86"},{"_id":"public/img/pinterest.png","modified":1452686532903,"shasum":"9c72917f8779c083157c6ce7a5d62ed4874f0630"},{"_id":"public/img/pinboard.png","modified":1452686532906,"shasum":"0891fbb6d092fa012bf936019923383d84c6aeb0"},{"_id":"public/img/mail.png","modified":1452686532910,"shasum":"fca8199cc77fdbd700a45bf56d091c82f4a67fe7"},{"_id":"public/img/linkedin.png","modified":1452686532911,"shasum":"e203138fb53c257cb214e97f4e30091b9c568d2c"},{"_id":"public/img/img-loading.png","modified":1452686532914,"shasum":"a9cd5cd11866824f31e3d1c5e23badfeb3f73031"},{"_id":"public/img/img-err.png","modified":1452686532916,"shasum":"23a63ea26eb3c1d5e677d9883cf36cc1a1a1228b"},{"_id":"public/img/google.png","modified":1452686532918,"shasum":"61a21fec7346fa3400b747ac9a201cf3d5bc013d"},{"_id":"public/img/github.png","modified":1452686532921,"shasum":"b84d03b32fa388dcbf149296ebd16dce6223d48d"},{"_id":"public/img/facebook.png","modified":1452686532923,"shasum":"d19ad7a0903daf26817afd8753cd97e0cc714f54"},{"_id":"public/img/douban.png","modified":1452686532924,"shasum":"e2ade003ffadd5826ee66ec23901c2d6e8607e4e"},{"_id":"public/img/delicious.png","modified":1452686532926,"shasum":"9553a5f5189e4a953e04a58a49dbfa74b86b73dd"},{"_id":"public/img/coderwall.png","modified":1452686532929,"shasum":"fa84676c4d654e040e51fd34bfcd9f9348cd5331"},{"_id":"public/fancybox/jquery.fancybox.pack.js","modified":1452686532930,"shasum":"9e0d51ca1dbe66f6c0c7aefd552dc8122e694a6e"},{"_id":"public/fancybox/jquery.fancybox.js","modified":1452686532931,"shasum":"a82597493d75ea989ca586e09173cff332efe41e"},{"_id":"public/fancybox/jquery.fancybox.css","modified":1452686532932,"shasum":"b6aa6692c2e5f8bd74d96827b78570f0c5683c20"},{"_id":"public/fancybox/helpers/jquery.fancybox-thumbs.js","modified":1452686532934,"shasum":"47da1ae5401c24b5c17cc18e2730780f5c1a7a0c"},{"_id":"public/fancybox/helpers/jquery.fancybox-thumbs.css","modified":1452686532936,"shasum":"4ac329c16a5277592fc12a37cca3d72ca4ec292f"},{"_id":"public/fancybox/helpers/jquery.fancybox-media.js","modified":1452686532938,"shasum":"294420f9ff20f4e3584d212b0c262a00a96ecdb3"},{"_id":"public/fancybox/helpers/jquery.fancybox-buttons.js","modified":1452686532940,"shasum":"dc3645529a4bf72983a39fa34c1eb9146e082019"},{"_id":"public/fancybox/helpers/jquery.fancybox-buttons.css","modified":1452686532944,"shasum":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8"},{"_id":"public/fancybox/helpers/fancybox_buttons.png","modified":1452686532946,"shasum":"e385b139516c6813dcd64b8fc431c364ceafe5f3"},{"_id":"public/fancybox/fancybox_sprite@2x.png","modified":1452686532947,"shasum":"30c58913f327e28f466a00f4c1ac8001b560aed8"},{"_id":"public/fancybox/fancybox_sprite.png","modified":1452686532949,"shasum":"17df19f97628e77be09c352bf27425faea248251"},{"_id":"public/fancybox/fancybox_overlay.png","modified":1452686532951,"shasum":"b3a4ee645ba494f52840ef8412015ba0f465dbe0"},{"_id":"public/fancybox/fancybox_loading@2x.gif","modified":1452686532953,"shasum":"273b123496a42ba45c3416adb027cd99745058b0"},{"_id":"public/fancybox/fancybox_loading.gif","modified":1452686532955,"shasum":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c"},{"_id":"public/fancybox/blank.gif","modified":1452686532957,"shasum":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a"},{"_id":"public/css/style.css","modified":1452686533547,"shasum":"10e9b93cf935a165020e48334a40b84b0f895401"},{"_id":"public/css/fonts/fontawesome-webfont.woff","modified":1452686533747,"shasum":"cafc4ac5761a0a252d33dce4ea3952cf9a38d832"},{"_id":"public/css/fonts/fontawesome-webfont.ttf","modified":1452686533749,"shasum":"1480b8101b02da9bc4c60341b5e185e63e585064"},{"_id":"public/css/fonts/fontawesome-webfont.svgz","modified":1452686533750,"shasum":"4bfdd33ed702e32ae01399fcc2652377f78e7626"},{"_id":"public/css/fonts/fontawesome-webfont.svg","modified":1452686533752,"shasum":"ba13657479b46daecb6336bfe376f84cef3ae58b"},{"_id":"public/css/fonts/fontawesome-webfont.eot","modified":1452686533755,"shasum":"3ce87b82c7a4ffdf65e96765c2ffda10b1a283c6"},{"_id":"public/uploads/avatar.png","modified":1452686533757,"shasum":"ec41946f7ef01c7523c8fdc1caf72b4cd0adbb5f"},{"_id":"public/instagram/index.html","modified":1452686533815,"shasum":"0d49b2a78ca6192b0ca0d561ef0af44d3a3cc12d"},{"_id":"public/2016/01/12/一篇搞定RSA加密与SHA签名/index.html","modified":1452686533865,"shasum":"de34c2de33c7d13cd9ef38fa244cf32e562a344c"},{"_id":"public/archives/index.html","modified":1452686533897,"shasum":"d8a12716d8100893361a549385a804d2f7a3e8ef"},{"_id":"public/archives/2016/index.html","modified":1452686533928,"shasum":"c4d04c82170feb8803e452f936c3f0886a0ef4f2"},{"_id":"public/archives/2016/01/index.html","modified":1452686533960,"shasum":"f5b734384ea9ddff6ce5d7188f12f5f7f02f759e"},{"_id":"public/index.html","modified":1452686534000,"shasum":"73053fc459c16a4736f2aad9cba2822102497ade"},{"_id":"public/tags/rsa加密/index.html","modified":1452686534028,"shasum":"d84a53c4580de003c347eaf7707055c9f914253f"},{"_id":"public/tags/sha签名/index.html","modified":1452686534057,"shasum":"3208636ac1cd494b41b10aef459d3200a76589eb"}],"Category":[],"Data":[],"Page":[{"layout":"post","slug":"instagram","title":"相册","noDate":"true","_content":"\n<div class=\"instagram\" data-client-id=\"956dd096b6e5496aba6662165b9b8443\" data-user-id=\"438522285\">\n    <a href=\"http://instagram.com/litten225\" target=\"_blank\" class=\"open-ins\">图片来自instagram，正在加载中…</a>\n</div>\n<script src=\"/js/jquery.lazyload.js\"></script>\n<script src=\"/js/instagram.js\"></script>","source":"instagram/index.md","raw":"---\nlayout: post\nslug: \"instagram\"\ntitle: \"相册\"\nnoDate: \"true\"\n---\n\n<div class=\"instagram\" data-client-id=\"956dd096b6e5496aba6662165b9b8443\" data-user-id=\"438522285\">\n    <a href=\"http://instagram.com/litten225\" target=\"_blank\" class=\"open-ins\">图片来自instagram，正在加载中…</a>\n</div>\n<script src=\"/js/jquery.lazyload.js\"></script>\n<script src=\"/js/instagram.js\"></script>","date":"2016-01-13T12:26:03.000Z","updated":"2016-01-13T12:26:03.000Z","path":"instagram/index.html","_id":"cijcs1y9i0005cufp0gd8j3gh","comments":1}],"Post":[{"title":"一篇搞定RSA加密与SHA签名","date":"2016-01-12T09:19:25.000Z","_content":"看到这篇文章的同学可幸福了，当时在做RSA加密与签名的时候网上的资料简直不要太老，做完后实在是忍受不下去了，这篇文章我会详细讲解iOS如何实现RSA加密与签名，并且与Java完全同步。\n\n<!--more-->\n\n# 基础知识 \n\n <p>\n\n1. **什么是RSA？**<p>\n答：RSA是一种非对称加密算法，常用来对传输数据进行加密，配合上数字摘要算法，也可以进行文字签名。\n\n2. **RSA加密中padding？**<p>\n答：padding即填充方式，由于RSA加密算法中要加密的明文是要比模数小的，padding就是通过一些填充方式来限制明文的长度。后面会详细介绍padding的几种模式以及分段加密。\n\n3. **加密和加签有什么区别？**<p>\n答：加密：公钥放在客户端，并使用公钥对数据进行加密，服务端拿到数据后用私钥进行解密； \n      加签：私钥放在客户端，并使用私钥对数据进行加签，服务端拿到数据后用公钥进行验签。       \n前者完全为了加密；后者主要是为了防恶意攻击，防止别人模拟我们的客户端对我们的服务器进行攻击，导致服务器瘫痪。\n\n# 基本原理<p>\n\nRSA使用“密钥对”对数据进行加密解密，在加密解密前需要先生存公钥（Public Key）和私钥（Private Key）。<p>\n**公钥(Public key):** 用于加密数据. 用于公开, 一般存放在数据提供方, 例如iOS客户端。<p>\n**私钥(Private key):** 用于解密数据. 必须保密, 私钥泄露会造成安全问题。<p>\niOS中的Security.framework提供了对RSA算法的支持，这种方式需要对密匙对进行处理, 根据public key生成证书, 通过private key生成p12格式的密匙。想想jave直接用字符串进行加密解密简单多了。(⊙o⊙)…\n\n# 实战\n<p>\n## 证书生成\nRSA加密这块公钥、私钥必不可少的。**Apple是不支持直接使用字符串进行加密解密的，推荐使用p12文件**。这边教大家去生成在加密中使用到的所有文件，并提供给Java使用，想当年这个公钥私钥搞了半天了。 %>_<%\n\n>* 生成模长为1024bit的私钥\nopenssl genrsa -out private_key.pem 1024\n* 生成certification require file\nopenssl req -new -key private_key.pem -out rsaCertReq.csr \n* 生成certification 并指定过期时间\nopenssl x509 -req -days3650-in rsaCertReq.csr -signkey private_key.pem -out rsaCert.crt\n* 生成公钥供iOS使用\nopenssl x509 -outform der -in rsaCert.crt -out public_key.der\n* 生成私钥供iOS使用 这边会让你输入密码，后期用到在生成secKeyRef的时候会用到这个密码\nopenssl pkcs12 -export -out private_key.p12 -inkey private_key.pem -in rsaCert.crt\n* 生成pem结尾的公钥供Java使用\nopenssl rsa -in private_key.pem -out rsa_public_key.pem -pubout\n* 生成pem结尾的私钥供Java使用openssl pkcs8 -topk8 -in private_key.pem -out pkcs8_private_key.pem -nocrypt\n\n**以上所有的步骤都是在终端下完成的哦  (*^__^*)**\n\n## 生成公钥和私钥的secKeyRef<p>\n   ```\n   //根据你的p12文件生成私钥对应的SecKeyRef 这边返回若是nil 请检查你p12文件的生成步骤\n- (SecKeyRef)getPrivateKeyRefrenceFromData:(NSData*)p12Data password:(NSString*)password {\n\nSecKeyRef privateKeyRef = NULL;\nNSMutableDictionary * options = [[NSMutableDictionary alloc] init];\n[options setObject: password forKey:(__bridge id)kSecImportExportPassphrase];\nCFArrayRef items = CFArrayCreate(NULL, 0, 0, NULL);\nOSStatus securityError = SecPKCS12Import((__bridge CFDataRef) p12Data, (__bridge CFDictionaryRef)options, &items);\nif (securityError == noErr && CFArrayGetCount(items) > 0) {\n    CFDictionaryRef identityDict = CFArrayGetValueAtIndex(items, 0);\n    SecIdentityRef identityApp = (SecIdentityRef)CFDictionaryGetValue(identityDict, kSecImportItemIdentity);\n    securityError = SecIdentityCopyPrivateKey(identityApp, &privateKeyRef);\n    if (securityError != noErr) {\n        privateKeyRef = NULL;\n    }\n}\nCFRelease(items);\n\nreturn privateKeyRef;\n}  \n   ```\n   \n   \n   ```\n    //根据你的der文件公钥对应的SecKeyRef\n - (SecKeyRef)getPublicKeyRefrenceFromeData:    (NSData*)derData {\n\nSecCertificateRef myCertificate = SecCertificateCreateWithData(kCFAllocatorDefault, (__bridge CFDataRef)derData);\nSecPolicyRef myPolicy = SecPolicyCreateBasicX509();\nSecTrustRef myTrust;\nOSStatus status = SecTrustCreateWithCertificates(myCertificate,myPolicy,&myTrust);\nSecTrustResultType trustResult;\nif (status == noErr) {\n    status = SecTrustEvaluate(myTrust, &trustResult);\n}\nSecKeyRef securityKey = SecTrustCopyPublicKey(myTrust);\nCFRelease(myCertificate);\nCFRelease(myPolicy);\nCFRelease(myTrust);\n\nreturn securityKey;\n}\n   ```\n   \n## 加密与解密 <p>\n \n ```\n - (NSData*)rsaEncryptData:(NSData*)data {\n    SecKeyRef key = [self getPublicKey];\n    size_t cipherBufferSize = SecKeyGetBlockSize(key);\n    uint8_t *cipherBuffer = malloc(cipherBufferSize * sizeof(uint8_t));\n    size_t blockSize = cipherBufferSize - 11;\n      size_t blockCount = (size_t)ceil([data length] / (double)blockSize);\n      NSMutableData *encryptedData = [[NSMutableData alloc] init];\n    for (int i=0; i<blockCount; i++) {\n    unsigned long bufferSize = MIN(blockSize , [data length] - i * blockSize);\n    NSData *buffer = [data subdataWithRange:NSMakeRange(i * blockSize, bufferSize)];\n    OSStatus status = SecKeyEncrypt(key, kSecPaddingPKCS1, (const uint8_t *)[buffer bytes], [buffer length], cipherBuffer, &cipherBufferSize);\n\n    if (status != noErr) {\n        return nil;\n    }\n\n    NSData *encryptedBytes = [[NSData alloc] initWithBytes:(const void *)cipherBuffer length:cipherBufferSize];\n    [encryptedData appendData:encryptedBytes];\n    }\n\n  if (cipherBuffer){\n    free(cipherBuffer);\n  }\n\n  return encryptedData;\n  }\n ```\n \n ```\n - (NSData*)rsaDecryptData:(NSData*)data {\nSecKeyRef key = [self getPrivatKey];\n\nsize_t cipherBufferSize = SecKeyGetBlockSize(key);\nsize_t blockSize = cipherBufferSize;\nsize_t blockCount = (size_t)ceil([data length] / (double)blockSize);\n\nNSMutableData *decryptedData = [[NSMutableData alloc] init];\n\nfor (int i = 0; i < blockCount; i++) {\n    unsigned long bufferSize = MIN(blockSize , [data length] - i * blockSize);\n    NSData *buffer = [data subdataWithRange:NSMakeRange(i * blockSize, bufferSize)];\n\n    size_t cipherLen = [buffer length];\n    void *cipher = malloc(cipherLen);\n    [buffer getBytes:cipher length:cipherLen];\n    size_t plainLen = SecKeyGetBlockSize(key);\n    void *plain = malloc(plainLen);\n\n    OSStatus status = SecKeyDecrypt(key, kSecPaddingPKCS1, cipher, cipherLen, plain, &plainLen);\n\n    if (status != noErr) {\n        return nil;\n    }\n\n    NSData *decryptedBytes = [[NSData alloc] initWithBytes:(const void *)plain length:plainLen];\n    [decryptedData appendData:decryptedBytes];\n}\n\nreturn decryptedData;\n}\n ```\n \n### RSA加密中的Padding \n\n* RSA_PKCS1_PADDING 填充模式，最常用的模式<p>\n要求: 输入：必须 比 RSA 钥模长(modulus) 短至少11个字节, 也就是　RSA_size(rsa) – 11 如果输入的明文过长，必须切割，然后填充。<p>\n输出：和modulus一样长<p>\n根据这个要求，对于1024bit的密钥，block length = 1024/8 – 11 = 117 字节<p>\n\n* RSA_PKCS1_OAEP_PADDING<p>\n输入：RSA_size(rsa) – 41<p>\n输出：和modulus一样长<p>\n\n* RSA_NO_PADDING　　不填充<p>\n输入：可以和RSA钥模长一样长，如果输入的明文过长，必须切割，　然后填充<p>\n输出：和modulus一样长<p>\n\n## 签名与验证\n\n```\n //对数据进行sha256签名\n- (NSData *)rsaSHA256SignData:(NSData *)plainData {\n      SecKeyRef key = [self getPrivatKey];\n    \n      size_t signedHashBytesSize = SecKeyGetBlockSize(key);\n      uint8_t* signedHashBytes = malloc(signedHashBytesSize);\n      memset(signedHashBytes, 0x0, signedHashBytesSize);\n    \n      size_t hashBytesSize = CC_SHA256_DIGEST_LENGTH;\n      uint8_t* hashBytes = malloc(hashBytesSize);\n      if (!CC_SHA256([plainData bytes], (CC_LONG)[plainData length], hashBytes)) {\n        return nil;\n    }\n    \n           SecKeyRawSign(key,\n                  kSecPaddingPKCS1SHA256,\n                  hashBytes,\n                  hashBytesSize,\n                  signedHashBytes,\n                  &signedHashBytesSize);\n    \n        NSData* signedHash = [NSData dataWithBytes:signedHashBytes\n                                        length:(NSUInteger)signedHashBytesSize];\n    \n        if (hashBytes)\n        free(hashBytes);\n    if (signedHashBytes)\n        free(signedHashBytes);\n    \n        return signedHash;\n}\n        \n```\n\n\n```\n\n//这边对签名的数据进行验证 验签成功，则返回YES\n- (BOOL)rsaSHA256VerifyData:(NSData *)plainData     withSignature:(NSData *)signature {\n        SecKeyRef key = [self getPublicKey];\n  \n        size_t signedHashBytesSize = SecKeyGetBlockSize(key);\n        const void* signedHashBytes = [signature bytes];\n    \n        size_t hashBytesSize = CC_SHA256_DIGEST_LENGTH;\n        uint8_t* hashBytes = malloc(hashBytesSize);\n        if (!CC_SHA256([plainData bytes], (CC_LONG)[plainData length], hashBytes)) {\n           return NO;\n        }\n    \n          OSStatus status = SecKeyRawVerify(key,\n                                      kSecPaddingPKCS1SHA256,\n                                      hashBytes,\n                                      hashBytesSize,\n                                      signedHashBytes,\n                                      signedHashBytesSize);\n    \n        return status == errSecSuccess;\n}\n```\n\n>**文章到此就结束了，希望大家能够喜欢。Demo[请点击](https://github.com/panxianyue/RSACryptor.git)**","source":"_posts/一篇搞定RSA加密与SHA签名.md","raw":"---\ntitle: 一篇搞定RSA加密与SHA签名\ndate: 2016-01-12 17:19:25\ntags: [rsa加密, sha签名]\n---\n看到这篇文章的同学可幸福了，当时在做RSA加密与签名的时候网上的资料简直不要太老，做完后实在是忍受不下去了，这篇文章我会详细讲解iOS如何实现RSA加密与签名，并且与Java完全同步。\n\n<!--more-->\n\n# 基础知识 \n\n <p>\n\n1. **什么是RSA？**<p>\n答：RSA是一种非对称加密算法，常用来对传输数据进行加密，配合上数字摘要算法，也可以进行文字签名。\n\n2. **RSA加密中padding？**<p>\n答：padding即填充方式，由于RSA加密算法中要加密的明文是要比模数小的，padding就是通过一些填充方式来限制明文的长度。后面会详细介绍padding的几种模式以及分段加密。\n\n3. **加密和加签有什么区别？**<p>\n答：加密：公钥放在客户端，并使用公钥对数据进行加密，服务端拿到数据后用私钥进行解密； \n      加签：私钥放在客户端，并使用私钥对数据进行加签，服务端拿到数据后用公钥进行验签。       \n前者完全为了加密；后者主要是为了防恶意攻击，防止别人模拟我们的客户端对我们的服务器进行攻击，导致服务器瘫痪。\n\n# 基本原理<p>\n\nRSA使用“密钥对”对数据进行加密解密，在加密解密前需要先生存公钥（Public Key）和私钥（Private Key）。<p>\n**公钥(Public key):** 用于加密数据. 用于公开, 一般存放在数据提供方, 例如iOS客户端。<p>\n**私钥(Private key):** 用于解密数据. 必须保密, 私钥泄露会造成安全问题。<p>\niOS中的Security.framework提供了对RSA算法的支持，这种方式需要对密匙对进行处理, 根据public key生成证书, 通过private key生成p12格式的密匙。想想jave直接用字符串进行加密解密简单多了。(⊙o⊙)…\n\n# 实战\n<p>\n## 证书生成\nRSA加密这块公钥、私钥必不可少的。**Apple是不支持直接使用字符串进行加密解密的，推荐使用p12文件**。这边教大家去生成在加密中使用到的所有文件，并提供给Java使用，想当年这个公钥私钥搞了半天了。 %>_<%\n\n>* 生成模长为1024bit的私钥\nopenssl genrsa -out private_key.pem 1024\n* 生成certification require file\nopenssl req -new -key private_key.pem -out rsaCertReq.csr \n* 生成certification 并指定过期时间\nopenssl x509 -req -days3650-in rsaCertReq.csr -signkey private_key.pem -out rsaCert.crt\n* 生成公钥供iOS使用\nopenssl x509 -outform der -in rsaCert.crt -out public_key.der\n* 生成私钥供iOS使用 这边会让你输入密码，后期用到在生成secKeyRef的时候会用到这个密码\nopenssl pkcs12 -export -out private_key.p12 -inkey private_key.pem -in rsaCert.crt\n* 生成pem结尾的公钥供Java使用\nopenssl rsa -in private_key.pem -out rsa_public_key.pem -pubout\n* 生成pem结尾的私钥供Java使用openssl pkcs8 -topk8 -in private_key.pem -out pkcs8_private_key.pem -nocrypt\n\n**以上所有的步骤都是在终端下完成的哦  (*^__^*)**\n\n## 生成公钥和私钥的secKeyRef<p>\n   ```\n   //根据你的p12文件生成私钥对应的SecKeyRef 这边返回若是nil 请检查你p12文件的生成步骤\n- (SecKeyRef)getPrivateKeyRefrenceFromData:(NSData*)p12Data password:(NSString*)password {\n\nSecKeyRef privateKeyRef = NULL;\nNSMutableDictionary * options = [[NSMutableDictionary alloc] init];\n[options setObject: password forKey:(__bridge id)kSecImportExportPassphrase];\nCFArrayRef items = CFArrayCreate(NULL, 0, 0, NULL);\nOSStatus securityError = SecPKCS12Import((__bridge CFDataRef) p12Data, (__bridge CFDictionaryRef)options, &items);\nif (securityError == noErr && CFArrayGetCount(items) > 0) {\n    CFDictionaryRef identityDict = CFArrayGetValueAtIndex(items, 0);\n    SecIdentityRef identityApp = (SecIdentityRef)CFDictionaryGetValue(identityDict, kSecImportItemIdentity);\n    securityError = SecIdentityCopyPrivateKey(identityApp, &privateKeyRef);\n    if (securityError != noErr) {\n        privateKeyRef = NULL;\n    }\n}\nCFRelease(items);\n\nreturn privateKeyRef;\n}  \n   ```\n   \n   \n   ```\n    //根据你的der文件公钥对应的SecKeyRef\n - (SecKeyRef)getPublicKeyRefrenceFromeData:    (NSData*)derData {\n\nSecCertificateRef myCertificate = SecCertificateCreateWithData(kCFAllocatorDefault, (__bridge CFDataRef)derData);\nSecPolicyRef myPolicy = SecPolicyCreateBasicX509();\nSecTrustRef myTrust;\nOSStatus status = SecTrustCreateWithCertificates(myCertificate,myPolicy,&myTrust);\nSecTrustResultType trustResult;\nif (status == noErr) {\n    status = SecTrustEvaluate(myTrust, &trustResult);\n}\nSecKeyRef securityKey = SecTrustCopyPublicKey(myTrust);\nCFRelease(myCertificate);\nCFRelease(myPolicy);\nCFRelease(myTrust);\n\nreturn securityKey;\n}\n   ```\n   \n## 加密与解密 <p>\n \n ```\n - (NSData*)rsaEncryptData:(NSData*)data {\n    SecKeyRef key = [self getPublicKey];\n    size_t cipherBufferSize = SecKeyGetBlockSize(key);\n    uint8_t *cipherBuffer = malloc(cipherBufferSize * sizeof(uint8_t));\n    size_t blockSize = cipherBufferSize - 11;\n      size_t blockCount = (size_t)ceil([data length] / (double)blockSize);\n      NSMutableData *encryptedData = [[NSMutableData alloc] init];\n    for (int i=0; i<blockCount; i++) {\n    unsigned long bufferSize = MIN(blockSize , [data length] - i * blockSize);\n    NSData *buffer = [data subdataWithRange:NSMakeRange(i * blockSize, bufferSize)];\n    OSStatus status = SecKeyEncrypt(key, kSecPaddingPKCS1, (const uint8_t *)[buffer bytes], [buffer length], cipherBuffer, &cipherBufferSize);\n\n    if (status != noErr) {\n        return nil;\n    }\n\n    NSData *encryptedBytes = [[NSData alloc] initWithBytes:(const void *)cipherBuffer length:cipherBufferSize];\n    [encryptedData appendData:encryptedBytes];\n    }\n\n  if (cipherBuffer){\n    free(cipherBuffer);\n  }\n\n  return encryptedData;\n  }\n ```\n \n ```\n - (NSData*)rsaDecryptData:(NSData*)data {\nSecKeyRef key = [self getPrivatKey];\n\nsize_t cipherBufferSize = SecKeyGetBlockSize(key);\nsize_t blockSize = cipherBufferSize;\nsize_t blockCount = (size_t)ceil([data length] / (double)blockSize);\n\nNSMutableData *decryptedData = [[NSMutableData alloc] init];\n\nfor (int i = 0; i < blockCount; i++) {\n    unsigned long bufferSize = MIN(blockSize , [data length] - i * blockSize);\n    NSData *buffer = [data subdataWithRange:NSMakeRange(i * blockSize, bufferSize)];\n\n    size_t cipherLen = [buffer length];\n    void *cipher = malloc(cipherLen);\n    [buffer getBytes:cipher length:cipherLen];\n    size_t plainLen = SecKeyGetBlockSize(key);\n    void *plain = malloc(plainLen);\n\n    OSStatus status = SecKeyDecrypt(key, kSecPaddingPKCS1, cipher, cipherLen, plain, &plainLen);\n\n    if (status != noErr) {\n        return nil;\n    }\n\n    NSData *decryptedBytes = [[NSData alloc] initWithBytes:(const void *)plain length:plainLen];\n    [decryptedData appendData:decryptedBytes];\n}\n\nreturn decryptedData;\n}\n ```\n \n### RSA加密中的Padding \n\n* RSA_PKCS1_PADDING 填充模式，最常用的模式<p>\n要求: 输入：必须 比 RSA 钥模长(modulus) 短至少11个字节, 也就是　RSA_size(rsa) – 11 如果输入的明文过长，必须切割，然后填充。<p>\n输出：和modulus一样长<p>\n根据这个要求，对于1024bit的密钥，block length = 1024/8 – 11 = 117 字节<p>\n\n* RSA_PKCS1_OAEP_PADDING<p>\n输入：RSA_size(rsa) – 41<p>\n输出：和modulus一样长<p>\n\n* RSA_NO_PADDING　　不填充<p>\n输入：可以和RSA钥模长一样长，如果输入的明文过长，必须切割，　然后填充<p>\n输出：和modulus一样长<p>\n\n## 签名与验证\n\n```\n //对数据进行sha256签名\n- (NSData *)rsaSHA256SignData:(NSData *)plainData {\n      SecKeyRef key = [self getPrivatKey];\n    \n      size_t signedHashBytesSize = SecKeyGetBlockSize(key);\n      uint8_t* signedHashBytes = malloc(signedHashBytesSize);\n      memset(signedHashBytes, 0x0, signedHashBytesSize);\n    \n      size_t hashBytesSize = CC_SHA256_DIGEST_LENGTH;\n      uint8_t* hashBytes = malloc(hashBytesSize);\n      if (!CC_SHA256([plainData bytes], (CC_LONG)[plainData length], hashBytes)) {\n        return nil;\n    }\n    \n           SecKeyRawSign(key,\n                  kSecPaddingPKCS1SHA256,\n                  hashBytes,\n                  hashBytesSize,\n                  signedHashBytes,\n                  &signedHashBytesSize);\n    \n        NSData* signedHash = [NSData dataWithBytes:signedHashBytes\n                                        length:(NSUInteger)signedHashBytesSize];\n    \n        if (hashBytes)\n        free(hashBytes);\n    if (signedHashBytes)\n        free(signedHashBytes);\n    \n        return signedHash;\n}\n        \n```\n\n\n```\n\n//这边对签名的数据进行验证 验签成功，则返回YES\n- (BOOL)rsaSHA256VerifyData:(NSData *)plainData     withSignature:(NSData *)signature {\n        SecKeyRef key = [self getPublicKey];\n  \n        size_t signedHashBytesSize = SecKeyGetBlockSize(key);\n        const void* signedHashBytes = [signature bytes];\n    \n        size_t hashBytesSize = CC_SHA256_DIGEST_LENGTH;\n        uint8_t* hashBytes = malloc(hashBytesSize);\n        if (!CC_SHA256([plainData bytes], (CC_LONG)[plainData length], hashBytes)) {\n           return NO;\n        }\n    \n          OSStatus status = SecKeyRawVerify(key,\n                                      kSecPaddingPKCS1SHA256,\n                                      hashBytes,\n                                      hashBytesSize,\n                                      signedHashBytes,\n                                      signedHashBytesSize);\n    \n        return status == errSecSuccess;\n}\n```\n\n>**文章到此就结束了，希望大家能够喜欢。Demo[请点击](https://github.com/panxianyue/RSACryptor.git)**","slug":"一篇搞定RSA加密与SHA签名","published":1,"updated":"2016-01-13T11:41:26.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cijcs1y980000cufphp6afu8d"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"cijcs1y980000cufphp6afu8d","tag_id":"cijcs1y9e0001cufp3qzj296q","_id":"cijcs1y9g0003cufp79lj8gbw"},{"post_id":"cijcs1y980000cufphp6afu8d","tag_id":"cijcs1y9f0002cufpdo3j03tm","_id":"cijcs1y9g0004cufptcfl18x2"}],"Tag":[{"name":"rsa加密","_id":"cijcs1y9e0001cufp3qzj296q"},{"name":"sha签名","_id":"cijcs1y9f0002cufpdo3j03tm"}]}}