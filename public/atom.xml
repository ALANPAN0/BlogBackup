<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[潘先生的博客]]></title>
  <subtitle><![CDATA[Just do it !]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://yoursite.com/"/>
  <updated>2016-01-24T09:41:58.000Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name><![CDATA[Panda]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[迟来的2015总结]]></title>
    <link href="http://yoursite.com/2016/01/17/%E8%BF%9F%E6%9D%A5%E7%9A%842015%E6%80%BB%E7%BB%93/"/>
    <id>http://yoursite.com/2016/01/17/迟来的2015总结/</id>
    <published>2016-01-17T12:08:19.000Z</published>
    <updated>2016-01-24T09:41:58.000Z</updated>
    <content type="html"><![CDATA[<p>2016年已经过了半个月了，才抽出时间来写这篇总结。以前很少有写博客的习惯，每年基本上都是考虑下去年做了些什么事，学到了什么等等。可能前一个月内还属于记忆犹新的阶段，现在想想，却什么也记不起来了。就在前段时间，在简书上写了两篇博文感觉挺好的，写博客能让我知道我这段时间做了什么事，并且当我闲下来的时候还可以回味一下，这种感觉真的很好，我会带着这种感觉一直坚持下去。</p>
<a id="more"></a>
<p>就在这周一天早上上班的路上，突然发现一片博客讲如何利用hexo搭建自己的博客，当时让我兴趣盎然，就有搭建自己博客的冲动，在工作的业余时间里慢慢的开始搭建自己的博客，搭建环境，购买域名，云储存等等。直到现在自己的博客终于有点样子了，不过说实话，身为一个处女座，一个追求完美主义者，一大半的时间花在主题了，换了一个不满意，换了一个还是不满意。最终，现在的这个样式自己感觉还是挺可以的。以后我会帮精力花在内容上，希望大家能够喜欢吧。</p>
<p>说说我的2015年吧，2015年最大变化莫过于我的工作地点从合肥换到了上海，和合肥的一大帮朋友分割两地。说实话，当初要不是同事纷纷离开公司的话我也不会这么快来到上海，在合房网的时候，最幸运的是有一群比较给力的同事，让我迅速的进步了不少。坤坤：让我知道了什么是全能，宪：让我知道了英语的重要性还有一些学习方法。挺：让我知道了一些做人做事的方法还有他那丰富的项目经验。从他们的身上我真的学到了很多，虽然我现在来到了上海，在工作中遇到一些不解也会不时的去请教他们。</p>
<p>2015年也有很多遗憾：</p>
<ul>
<li>没能够看几本书</li>
<li>工作的业余时间也没有去锻炼</li>
<li>swift才开始学</li>
</ul>
<p>2016年我要：</p>
<ul>
<li>多看几本书，虽然自己不太爱看书</li>
<li>和室友办张健身卡，每天抽出点时间健身去</li>
<li>努力学习swift</li>
<li>每个月写一篇博客</li>
<li>多掌握几门语言，像javascript</li>
<li>扩展自己的社交圈</li>
</ul>
<p>不知不觉的扯了这么多，废话就不多说了， 洗洗睡了。😬😁</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>2016年已经过了半个月了，才抽出时间来写这篇总结。以前很少有写博客的习惯，每年基本上都是考虑下去年做了些什么事，学到了什么等等。可能前一个月内还属于记忆犹新的阶段，现在想想，却什么也记不起来了。就在前段时间，在简书上写了两篇博文感觉挺好的，写博客能让我知道我这段时间做了什么事，并且当我闲下来的时候还可以回味一下，这种感觉真的很好，我会带着这种感觉一直坚持下去。</p>]]>
    
    </summary>
    
      <category term="life" scheme="http://yoursite.com/categories/life/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[浅谈Socket学习中的那些事]]></title>
    <link href="http://yoursite.com/2016/01/16/%E6%B5%85%E8%B0%88Socket%E5%AD%A6%E4%B9%A0%E4%B8%AD%E7%9A%84%E9%82%A3%E4%BA%9B%E4%BA%8B/"/>
    <id>http://yoursite.com/2016/01/16/浅谈Socket学习中的那些事/</id>
    <published>2016-01-16T13:17:20.000Z</published>
    <updated>2016-01-17T07:19:20.000Z</updated>
    <content type="html"><![CDATA[<p>Socket是为网络服务提供的一种机制，学习之前对Socket基本上没有任何的理解，希望经过此次的学习，能够揭开Socket神秘面纱。在此仅想记录自己的学习历程和一些学习心得。</p>
<a id="more"></a>
<h1 id="OSI_u3001TCP_5CIP_u53C2_u8003_u6A21_u578B"><a href="#OSI_u3001TCP_5CIP_u53C2_u8003_u6A21_u578B" class="headerlink" title="OSI、TCP\IP参考模型"></a>OSI、TCP\IP参考模型</h1><p>

</p><p><img src="http://7xq5ax.com1.z0.glb.clouddn.com/OSI%E5%8F%82%E8%80%83%E6%A8%A1%E5%9E%8B.png" alt=""></p>
<p>

</p><h2 id="u7B80_u5355_u89E3_u91CA"><a href="#u7B80_u5355_u89E3_u91CA" class="headerlink" title="简单解释"></a>简单解释</h2><ol>
<li><p>物理层：主要定义物理设备标准，如网线的接口类型、各种传输介质的传输速率等。2. </p>
</li>
<li><p>数据链路层：主要将从物理层接收的数据进行MAC地址的封装与解封装。</p>
</li>
<li><p>网络层：选择合适的网间路由和交换结点，确保数据及时传送，将从下层接收到的数据进行IP地址的封装与解封装。</p>
</li>
<li><p>传输层：定义了一些传输数据的协议和端口，如TCP、UDP协议，主要将从下层接收的数据进行分段和传输，到达目的地址后再进行重组，以往把这一层数据叫做段。</p>
</li>
<li><p>会话层：通过传输层建立数据传输通路。</p>
</li>
<li><p>表示层：主要是进行对接收的数据进行解释、压缩与解压缩等，即把计算机能够识别的东西转化成人能够识别的东西（如图片、声音等）。</p>
</li>
<li><p>应用层：主要是一些终端的应用，比如说FTP（各种文件下载）、浏览器、QQ等，可以将其理解为在电脑屏幕上可以看到的东西，也就是终端应用。</p><p></p>
</li>
</ol>
<h2 id="u7F51_u7EDC_u901A_u8BAF_u8981_u7D20"><a href="#u7F51_u7EDC_u901A_u8BAF_u8981_u7D20" class="headerlink" title="网络通讯要素"></a>网络通讯要素</h2><p><strong>IP地址</strong>：网络中设备的标示</p>
<p><strong>端口号</strong>：用来标示进程的逻辑地址，不同进程的标示</p>
<p><strong>传输协议</strong>：用什么样的方式进行交互，常见协议TCP/UDP</p>
<h1 id="TCP/UDP"><a href="#TCP/UDP" class="headerlink" title="TCP/UDP"></a>TCP/UDP</h1><p><strong>TCP（传输控制协议）</strong></p>
<ol>
<li><p>建立连接，形成数据传输的通道</p>
</li>
<li><p>在连接中可进行大数据传输（数据的大小不受限制）</p>
</li>
<li><p>通过三次握手建立连接，可靠协议，安全送达</p>
</li>
<li><p>先建立连接，效率较低</p><p></p>
</li>
</ol>
<p><strong>UDP（用户数据报协议）</strong></p>
<ol>
<li><p>不需要建立连接，将数据封装在数据包中</p>
</li>
<li><p>每个数据包得大小限制在64k之内</p>
</li>
<li><p>无需连接，是不可靠协议</p>
</li>
<li><p>不需要连接，速度较快</p>
</li>
</ol>
<h1 id="Socket"><a href="#Socket" class="headerlink" title="Socket"></a>Socket</h1><h2 id="u7B80_u5355_u89E3_u91CA-1"><a href="#u7B80_u5355_u89E3_u91CA-1" class="headerlink" title="简单解释"></a>简单解释</h2><ol>
<li><p>网络提供服务的一种机制</p>
</li>
<li><p>通信的两端都是socket</p>
</li>
<li><p>网络通信其实就是socket间的通信</p>
</li>
<li><p>数据在两个socket间通过IO传输</p>
</li>
</ol>
<p><img src="http://7xq5ax.com1.z0.glb.clouddn.com/%E8%BE%93%E5%85%A5%E8%BE%93%E5%87%BA%E6%B5%81.png" alt=""></p>
<h2 id="iOS_u4E2D_u5E38_u7528_u7684_u4E24_u79CDSocket_u7C7B_u578B"><a href="#iOS_u4E2D_u5E38_u7528_u7684_u4E24_u79CDSocket_u7C7B_u578B" class="headerlink" title="iOS中常用的两种Socket类型"></a>iOS中常用的两种Socket类型</h2><p><strong>流式Socket（SOCK_STREAM）</strong>：流式是一种面向连接的Socket，针对于面向连接的TCP服务应用</p>
<p><strong>数据报式Socket（SOCK_DGRAM）</strong>：数据报式Socket是一种无连接的Socket，对应于无连接的UDP服务应用</p>
<h2 id="Http_u4E0ESocket_u7684_u533A_u522B"><a href="#Http_u4E0ESocket_u7684_u533A_u522B" class="headerlink" title="Http与Socket的区别"></a>Http与Socket的区别</h2><ol>
<li><p>Http是基于Socket的实现；Http应用层协议，主要解决如何包装数据</p>
</li>
<li><p>Http传输的数据格式是规定好的，Socket实现数据传输是最原始，Socket实现的数据传输格式可自定义</p>
</li>
<li><p>Http建立的连接称为短连接，Socket建立的连接为长连接</p>
</li>
<li><p>Socket是对TCP/IP协议的封装，Socket本身并不是协议，而是一个调用接口(API),通过Socket我们才能使用TCP/IP协议</p>
</li>
</ol>
<h1 id="u6700_u540E"><a href="#u6700_u540E" class="headerlink" title="最后"></a>最后</h1><p></p><p><br>在学习的过程中会模仿微信做类似的demo，涉及到的一些相关地址如下：</p>
<ol>
<li><p>iOS XMPP框架：<a href="https://github.com/robbiehanson/XMPPFramework" target="_blank" rel="external">https://github.com/robbiehanson/XMPPFramework</a></p>
</li>
<li><p>Server：<a href="http://www.igniterealtime.org/downloads/index.jsp" target="_blank" rel="external">http://www.igniterealtime.org/downloads/index.jsp</a></p>
</li>
<li><p>数据库：<a href="http://dev.mysql.com/downloads/mysql/" target="_blank" rel="external">http://dev.mysql.com/downloads/mysql/</a></p>
</li>
</ol>
]]></content>
    <summary type="html">
    <![CDATA[<p>Socket是为网络服务提供的一种机制，学习之前对Socket基本上没有任何的理解，希望经过此次的学习，能够揭开Socket神秘面纱。在此仅想记录自己的学习历程和一些学习心得。</p>]]>
    
    </summary>
    
      <category term="HTTP" scheme="http://yoursite.com/tags/HTTP/"/>
    
      <category term="SOCKET" scheme="http://yoursite.com/tags/SOCKET/"/>
    
      <category term="TCP" scheme="http://yoursite.com/tags/TCP/"/>
    
      <category term="UDP" scheme="http://yoursite.com/tags/UDP/"/>
    
      <category term="iOS" scheme="http://yoursite.com/categories/iOS/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[一篇搞定RSA加密与SHA签名]]></title>
    <link href="http://yoursite.com/2016/01/12/%E4%B8%80%E7%AF%87%E6%90%9E%E5%AE%9ARSA%E5%8A%A0%E5%AF%86%E4%B8%8ESHA%E7%AD%BE%E5%90%8D/"/>
    <id>http://yoursite.com/2016/01/12/一篇搞定RSA加密与SHA签名/</id>
    <published>2016-01-12T09:19:25.000Z</published>
    <updated>2016-01-17T13:38:17.000Z</updated>
    <content type="html"><![CDATA[<p>看到这篇文章的同学可幸福了，当时在做RSA加密与签名的时候网上的资料简直不要太老，做完后实在是忍受不下去了，这篇文章我会详细讲解iOS如何实现RSA加密与签名，并且与Java完全同步。</p>
<a id="more"></a>
<h1 id="u57FA_u7840_u77E5_u8BC6"><a href="#u57FA_u7840_u77E5_u8BC6" class="headerlink" title="基础知识"></a>基础知识</h1> <p>

<ol>
<li><p><strong>什么是RSA？</strong></p><p><br>答：RSA是一种非对称加密算法，常用来对传输数据进行加密，配合上数字摘要算法，也可以进行文字签名。</p>
</li>
<li><p><strong>RSA加密中padding？</strong></p><p><br>答：padding即填充方式，由于RSA加密算法中要加密的明文是要比模数小的，padding就是通过一些填充方式来限制明文的长度。后面会详细介绍padding的几种模式以及分段加密。</p>
</li>
<li><p><strong>加密和加签有什么区别？</strong></p><p><br>答：加密：公钥放在客户端，并使用公钥对数据进行加密，服务端拿到数据后用私钥进行解密；<br>   加签：私钥放在客户端，并使用私钥对数据进行加签，服务端拿到数据后用公钥进行验签。<br>前者完全为了加密；后者主要是为了防恶意攻击，防止别人模拟我们的客户端对我们的服务器进行攻击，导致服务器瘫痪。</p>
</li>
</ol>
</p><h1 id="u57FA_u672C_u539F_u7406"><a href="#u57FA_u672C_u539F_u7406" class="headerlink" title="基本原理"></a>基本原理<p></p></h1><p>RSA使用“密钥对”对数据进行加密解密，在加密解密前需要先生存公钥（Public Key）和私钥（Private Key）。</p><p><br><strong>公钥(Public key):</strong> 用于加密数据. 用于公开, 一般存放在数据提供方, 例如iOS客户端。</p><p><br><strong>私钥(Private key):</strong> 用于解密数据. 必须保密, 私钥泄露会造成安全问题。</p><p><br>iOS中的Security.framework提供了对RSA算法的支持，这种方式需要对密匙对进行处理, 根据public key生成证书, 通过private key生成p12格式的密匙。想想jave直接用字符串进行加密解密简单多了。(⊙o⊙)…</p>
<h1 id="u5B9E_u6218"><a href="#u5B9E_u6218" class="headerlink" title="实战"></a>实战</h1><p></p><p></p>
<h2 id="u8BC1_u4E66_u751F_u6210"><a href="#u8BC1_u4E66_u751F_u6210" class="headerlink" title="证书生成"></a>证书生成</h2><p>RSA加密这块公钥、私钥必不可少的。<strong>Apple是不支持直接使用字符串进行加密解密的，推荐使用p12文件</strong>。这边教大家去生成在加密中使用到的所有文件，并提供给Java使用，想当年这个公钥私钥搞了半天了。 %&gt;_&lt;%</p>
<blockquote>
<ul>
<li>生成模长为1024bit的私钥<br>openssl genrsa -out private_key.pem 1024</li>
<li>生成certification require file<br>openssl req -new -key private_key.pem -out rsaCertReq.csr </li>
<li>生成certification 并指定过期时间<br>openssl x509 -req -days3650-in rsaCertReq.csr -signkey private_key.pem -out rsaCert.crt</li>
<li>生成公钥供iOS使用<br>openssl x509 -outform der -in rsaCert.crt -out public_key.der</li>
<li>生成私钥供iOS使用 这边会让你输入密码，后期用到在生成secKeyRef的时候会用到这个密码<br>openssl pkcs12 -export -out private_key.p12 -inkey private_key.pem -in rsaCert.crt</li>
<li>生成pem结尾的公钥供Java使用<br>openssl rsa -in private_key.pem -out rsa_public_key.pem -pubout</li>
<li>生成pem结尾的私钥供Java使用openssl pkcs8 -topk8 -in private_key.pem -out pkcs8_private_key.pem -nocrypt</li>
</ul>
</blockquote>
<p><strong>以上所有的步骤都是在终端下完成的哦  (<em>^__^</em>)</strong></p>
<h2 id="u751F_u6210_u516C_u94A5_u548C_u79C1_u94A5_u7684secKeyRef"><a href="#u751F_u6210_u516C_u94A5_u548C_u79C1_u94A5_u7684secKeyRef" class="headerlink" title="生成公钥和私钥的secKeyRef"></a>生成公钥和私钥的secKeyRef<p></p></h2>   <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">   //&#26681;&#25454;&#20320;&#30340;p12&#25991;&#20214;&#29983;&#25104;&#31169;&#38053;&#23545;&#24212;&#30340;SecKeyRef &#36825;&#36793;&#36820;&#22238;&#33509;&#26159;nil &#35831;&#26816;&#26597;&#20320;p12&#25991;&#20214;&#30340;&#29983;&#25104;&#27493;&#39588;&#10;- (SecKeyRef)getPrivateKeyRefrenceFromData:(NSData*)p12Data password:(NSString*)password &#123;&#10;&#10;SecKeyRef privateKeyRef = NULL;&#10;NSMutableDictionary * options = [[NSMutableDictionary alloc] init];&#10;[options setObject: password forKey:(__bridge id)kSecImportExportPassphrase];&#10;CFArrayRef items = CFArrayCreate(NULL, 0, 0, NULL);&#10;OSStatus securityError = SecPKCS12Import((__bridge CFDataRef) p12Data, (__bridge CFDictionaryRef)options, &#38;items);&#10;if (securityError == noErr &#38;&#38; CFArrayGetCount(items) &#62; 0) &#123;&#10;    CFDictionaryRef identityDict = CFArrayGetValueAtIndex(items, 0);&#10;    SecIdentityRef identityApp = (SecIdentityRef)CFDictionaryGetValue(identityDict, kSecImportItemIdentity);&#10;    securityError = SecIdentityCopyPrivateKey(identityApp, &#38;privateKeyRef);&#10;    if (securityError != noErr) &#123;&#10;        privateKeyRef = NULL;&#10;    &#125;&#10;&#125;&#10;CFRelease(items);&#10;&#10;return privateKeyRef;&#10;&#125;</span><br></pre></td></tr></table></figure>
   <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">    //&#26681;&#25454;&#20320;&#30340;der&#25991;&#20214;&#20844;&#38053;&#23545;&#24212;&#30340;SecKeyRef&#10; - (SecKeyRef)getPublicKeyRefrenceFromeData:    (NSData*)derData &#123;&#10;&#10;SecCertificateRef myCertificate = SecCertificateCreateWithData(kCFAllocatorDefault, (__bridge CFDataRef)derData);&#10;SecPolicyRef myPolicy = SecPolicyCreateBasicX509();&#10;SecTrustRef myTrust;&#10;OSStatus status = SecTrustCreateWithCertificates(myCertificate,myPolicy,&#38;myTrust);&#10;SecTrustResultType trustResult;&#10;if (status == noErr) &#123;&#10;    status = SecTrustEvaluate(myTrust, &#38;trustResult);&#10;&#125;&#10;SecKeyRef securityKey = SecTrustCopyPublicKey(myTrust);&#10;CFRelease(myCertificate);&#10;CFRelease(myPolicy);&#10;CFRelease(myTrust);&#10;&#10;return securityKey;&#10;&#125;</span><br></pre></td></tr></table></figure>
<h2 id="u52A0_u5BC6_u4E0E_u89E3_u5BC6"><a href="#u52A0_u5BC6_u4E0E_u89E3_u5BC6" class="headerlink" title="加密与解密"></a>加密与解密 <p></p></h2> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">- (NSData*)rsaEncryptData:(NSData*)data &#123;&#10;   SecKeyRef key = [self getPublicKey];&#10;   size_t cipherBufferSize = SecKeyGetBlockSize(key);&#10;   uint8_t *cipherBuffer = malloc(cipherBufferSize * sizeof(uint8_t));&#10;   size_t blockSize = cipherBufferSize - 11;&#10;     size_t blockCount = (size_t)ceil([data length] / (double)blockSize);&#10;     NSMutableData *encryptedData = [[NSMutableData alloc] init];&#10;   for (int i=0; i&#60;blockCount; i++) &#123;&#10;   unsigned long bufferSize = MIN(blockSize , [data length] - i * blockSize);&#10;   NSData *buffer = [data subdataWithRange:NSMakeRange(i * blockSize, bufferSize)];&#10;   OSStatus status = SecKeyEncrypt(key, kSecPaddingPKCS1, (const uint8_t *)[buffer bytes], [buffer length], cipherBuffer, &#38;cipherBufferSize);&#10;&#10;   if (status != noErr) &#123;&#10;       return nil;&#10;   &#125;&#10;&#10;   NSData *encryptedBytes = [[NSData alloc] initWithBytes:(const void *)cipherBuffer length:cipherBufferSize];&#10;   [encryptedData appendData:encryptedBytes];&#10;   &#125;&#10;&#10; if (cipherBuffer)&#123;&#10;   free(cipherBuffer);&#10; &#125;&#10;&#10; return encryptedData;&#10; &#125;</span><br></pre></td></tr></table></figure>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"> - (NSData*)rsaDecryptData:(NSData*)data &#123;&#10;SecKeyRef key = [self getPrivatKey];&#10;&#10;size_t cipherBufferSize = SecKeyGetBlockSize(key);&#10;size_t blockSize = cipherBufferSize;&#10;size_t blockCount = (size_t)ceil([data length] / (double)blockSize);&#10;&#10;NSMutableData *decryptedData = [[NSMutableData alloc] init];&#10;&#10;for (int i = 0; i &#60; blockCount; i++) &#123;&#10;    unsigned long bufferSize = MIN(blockSize , [data length] - i * blockSize);&#10;    NSData *buffer = [data subdataWithRange:NSMakeRange(i * blockSize, bufferSize)];&#10;&#10;    size_t cipherLen = [buffer length];&#10;    void *cipher = malloc(cipherLen);&#10;    [buffer getBytes:cipher length:cipherLen];&#10;    size_t plainLen = SecKeyGetBlockSize(key);&#10;    void *plain = malloc(plainLen);&#10;&#10;    OSStatus status = SecKeyDecrypt(key, kSecPaddingPKCS1, cipher, cipherLen, plain, &#38;plainLen);&#10;&#10;    if (status != noErr) &#123;&#10;        return nil;&#10;    &#125;&#10;&#10;    NSData *decryptedBytes = [[NSData alloc] initWithBytes:(const void *)plain length:plainLen];&#10;    [decryptedData appendData:decryptedBytes];&#10;&#125;&#10;&#10;return decryptedData;&#10;&#125;</span><br></pre></td></tr></table></figure>
<h3 id="RSA_u52A0_u5BC6_u4E2D_u7684Padding"><a href="#RSA_u52A0_u5BC6_u4E2D_u7684Padding" class="headerlink" title="RSA加密中的Padding"></a>RSA加密中的Padding</h3><ul>
<li><p>RSA_PKCS1_PADDING 填充模式，最常用的模式</p><p><br>要求: 输入：必须 比 RSA 钥模长(modulus) 短至少11个字节, 也就是　RSA_size(rsa) – 11 如果输入的明文过长，必须切割，然后填充。</p><p><br>输出：和modulus一样长</p><p><br>根据这个要求，对于1024bit的密钥，block length = 1024/8 – 11 = 117 字节</p><p></p>
</li>
<li><p>RSA_PKCS1_OAEP_PADDING</p><p><br>输入：RSA_size(rsa) – 41</p><p><br>输出：和modulus一样长</p><p></p>
</li>
<li><p>RSA_NO_PADDING　　不填充</p><p><br>输入：可以和RSA钥模长一样长，如果输入的明文过长，必须切割，　然后填充</p><p><br>输出：和modulus一样长</p><p></p>
</li>
</ul>
<h2 id="u7B7E_u540D_u4E0E_u9A8C_u8BC1"><a href="#u7B7E_u540D_u4E0E_u9A8C_u8BC1" class="headerlink" title="签名与验证"></a>签名与验证</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"> //&#23545;&#25968;&#25454;&#36827;&#34892;sha256&#31614;&#21517;&#10;- (NSData *)rsaSHA256SignData:(NSData *)plainData &#123;&#10;&#160;    &#160;SecKeyRef key = [self getPrivatKey];&#10;&#160;&#160; &#160;&#10;&#160; &#160;   size_t signedHashBytesSize = SecKeyGetBlockSize(key);&#10;&#160; &#160;   uint8_t* signedHashBytes = malloc(signedHashBytesSize);&#10;&#160; &#160;   memset(signedHashBytes, 0x0, signedHashBytesSize);&#10;&#160;&#160; &#160;&#10;&#160; &#160;   size_t hashBytesSize = CC_SHA256_DIGEST_LENGTH;&#10;&#160; &#160;   uint8_t* hashBytes = malloc(hashBytesSize);&#10;&#160; &#160;   if (!CC_SHA256([plainData bytes], (CC_LONG)[plainData length], hashBytes)) &#123;&#10;&#160; &#160; &#160; &#160; return nil;&#10;&#160; &#160; &#125;&#10;&#160;&#160; &#160;&#10;&#160; &#160;        SecKeyRawSign(key,&#10;&#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; kSecPaddingPKCS1SHA256,&#10;&#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; hashBytes,&#10;&#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; hashBytesSize,&#10;&#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; signedHashBytes,&#10;&#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#38;signedHashBytesSize);&#10;&#160;&#160; &#160;&#10;&#160; &#160;     NSData* signedHash = [NSData dataWithBytes:signedHashBytes&#10;&#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; length:(NSUInteger)signedHashBytesSize];&#10;&#160;&#160; &#160;&#10;&#160; &#160;     if (hashBytes)&#10;&#160; &#160; &#160; &#160; free(hashBytes);&#10;&#160; &#160; if (signedHashBytes)&#10;&#160; &#160; &#160; &#160; free(signedHashBytes);&#10;&#160;&#160; &#160;&#10;&#160; &#160;     return signedHash;&#10;&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#10;//&#36825;&#36793;&#23545;&#31614;&#21517;&#30340;&#25968;&#25454;&#36827;&#34892;&#39564;&#35777; &#39564;&#31614;&#25104;&#21151;&#65292;&#21017;&#36820;&#22238;YES&#10;- (BOOL)rsaSHA256VerifyData:(NSData *)plainData     withSignature:(NSData *)signature &#123;&#10;&#160; &#160;     SecKeyRef key = [self getPublicKey];&#10;  &#10;&#160;     &#160; size_t signedHashBytesSize = SecKeyGetBlockSize(key);&#10;&#160; &#160;     const void* signedHashBytes = [signature bytes];&#10;&#160;&#160; &#160;&#10;&#160; &#160;     size_t hashBytesSize = CC_SHA256_DIGEST_LENGTH;&#10;&#160; &#160;     uint8_t* hashBytes = malloc(hashBytesSize);&#10;&#160;     &#160; if (!CC_SHA256([plainData bytes], (CC_LONG)[plainData length], hashBytes)) &#123;&#10;&#160; &#160; &#160; &#160;    return NO;&#10;&#160; &#160;     &#125;&#10;&#160;&#160; &#160;&#10;&#160; &#160;       OSStatus status = SecKeyRawVerify(key,&#10;&#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; kSecPaddingPKCS1SHA256,&#10;&#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; hashBytes,&#10;&#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; hashBytesSize,&#10;&#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; signedHashBytes,&#10;&#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; signedHashBytesSize);&#10;&#160;&#160; &#160;&#10;&#160; &#160;     return status == errSecSuccess;&#10;&#125;</span><br></pre></td></tr></table></figure>
<p></p><p><br><strong>文章到此就结束了，希望大家能够喜欢。请点击<a href="https://github.com/panxianyue/RSACryptor.git" target="_blank" rel="external">Git</a>获取相关demo</strong></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>看到这篇文章的同学可幸福了，当时在做RSA加密与签名的时候网上的资料简直不要太老，做完后实在是忍受不下去了，这篇文章我会详细讲解iOS如何实现RSA加密与签名，并且与Java完全同步。</p>]]>
    
    </summary>
    
      <category term="RSA加密" scheme="http://yoursite.com/tags/RSA%E5%8A%A0%E5%AF%86/"/>
    
      <category term="SHA签名" scheme="http://yoursite.com/tags/SHA%E7%AD%BE%E5%90%8D/"/>
    
      <category term="iOS" scheme="http://yoursite.com/categories/iOS/"/>
    
  </entry>
  
</feed>
